//
//  ContentView.swift
//  ImageGen
//
//  Created by Perry Sun on 18/11/23.
//

import SwiftUI
import OpenAIKit

final class ViewModel: ObservableObject {
    private var openai: OpenAI?
    
    func setup(){
        openai = OpenAI(Configuration(
            organizationId: "Personal", apiKey:"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"
        )
        )
        
    }
    
    func generateImage(prompt: String) async -> UIImage? {
        guard let openai = openai else {
            return nil
            
        }
        
        do{
            let params = ImageParameters(
                prompt: prompt,
                resolution: .medium,
                responseFormat: .base64Json
            )
            
            let result = try await openai.createImage(parameters: params)
            
            let data = result.data[0].image
            let image = try openai.decodeBase64Image(data)
            return image
        }
        
        catch{
            
            print(String(describing: error))
            return nil
        }
        
    }
}

struct ContentView: View {
    @ObservedObject var viewModel = ViewModel()
    @State var teamName = ""
    @State var theme = "Holiday"
    @State var filter = "Natural"
    @State var resolution = "medium"
    @State var image: UIImage?
    
    var body: some View {
        NavigationView{
            VStack {
                if let image = image {
                    Image(uiImage: image)
                        .resizable()
                        .aspectRatio(contentMode:.fit)
                        .frame(width:300, height:300)
                }
                
                Spacer()
                
                TextField("Team Name", text: $teamName)
                    .padding()
                
                HStack {Text("Theme").font(.subheadline).frame(width: 100, alignment: .leading)
                    Spacer()
                               }.padding(.horizontal)
                
                Picker("Theme", selection: $theme) {
                    Text("Nature").tag("Nature")
                    Text("Fantasy").tag("Fantasy")
                    Text("Technology").tag("Technology")
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding()
                
                HStack {Text("Filter").font(.subheadline).frame(width: 100, alignment: .leading)
                    Spacer()
                               }.padding(.horizontal)
                
                Picker("Filter", selection: $filter) {
                    Text("Sharpening").tag("Sharpening")
                    Text("HDR").tag("HDR")
                    Text("Artistic").tag("Artistic")
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding()
                
                HStack {Text("Resolution").font(.subheadline).frame(width: 100, alignment: .leading)
                    Spacer()
                               }.padding(.horizontal)
                
                Picker("Resolution", selection: $resolution) {
                    Text("Low").tag("low")
                    Text("Medium").tag("medium")
                    Text("High").tag("high")
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding()
                
                Button("Generate!"){
                    Task {
                        let prompt = """
                            Team Name: \(teamName)
                            Theme: \(theme)
                            Filter: \(filter)
                            Resolution: \(resolution)
                        """
                        
                        let result = await viewModel.generateImage(prompt: prompt)
                        if result == nil {
                            print("Failed to get image")
                        }
                        self.image = result
                    }
                }
                .padding()
                
            }
            .toolbar {
                ToolbarItem(placement: .principal) {
                    Text("Cobot ImageGen")
                        .font(.title)
                        .foregroundColor(.primary)
                }
            }
            .onAppear {
                viewModel.setup()
            }
        }
    }
}




struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
